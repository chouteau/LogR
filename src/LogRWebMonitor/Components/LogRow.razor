@using Microsoft.AspNetCore.Components.Web

<tr @key="Log" class="@css">
    <td>
        <button class="btn btn-link @Log.LogId" @onclick="ShowLog">
            @RowNumber
        </button>
    </td>
    <td>@Log.CreationDate</td>
    <td>@Log.Category</td>
    <td>
        <FilterLink MachineName="@Log.MachineName">@Log.MachineName</FilterLink>
    </td>
    <td>
        <FilterLink HostName="@Log.HostName">@Log.HostName</FilterLink>
    </td>
    <td>
        <FilterLink ApplicationName="@Log.ApplicationName">@Log.ApplicationName</FilterLink>
    </td>
    <td>
        <FilterLink Context="@Log.Context">@Log.Context</FilterLink>
    </td>
    <td>
        @Log.Message
    </td>
</tr>
@if (!string.IsNullOrWhiteSpace(Log.ExceptionStack))
{
    var exceptoinStack = new MarkupString(Log.ExceptionStack.Replace("\n", "<br/>"));
    <tr class="@css">
        <td colspan="8">
            @exceptoinStack
        </td>
    </tr>
}

@code {
    [Parameter]
    public LogRPush.LogInfo Log { get; set; }

    [Parameter]
    public int RowNumber { get; set; }

    [Inject] 
    NavigationManager NavigationManager { get; set; }

    string css
    {
        get
        {
            switch (Log.Category)
            {
                case LogRPush.Category.Trace :
                    return "table-secondary";
                case LogRPush.Category.Debug :
                    return "table-default";
                case LogRPush.Category.Error :
                    return "table-danger";
                case LogRPush.Category.Fatal :
                    return "table-dark";
                case LogRPush.Category.Info :
                    return "table-info";
                case LogRPush.Category.Notification :
                    return "table-success";
                case LogRPush.Category.Sql :
                    return "table-primary";
                case LogRPush.Category.Warn :
                    return "table-warning";
                default:
                    return string.Empty;
            }

        }
    }

    void ShowLog()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("l", Log.LogId);

        var uri = NavigationManager.GetUriWithQueryParameters(NavigationManager.Uri, new System.Collections.ObjectModel.ReadOnlyDictionary<string, object>(parameters));
        NavigationManager.NavigateTo(uri);
    }
}
